/*
		SECURITY MODULES
*/

/obj/item/robot_module/security
	name = "Security"
	basic_modules = list(
		/obj/item/assembly/flash/cyborg,
		/obj/item/restraints/handcuffs/cable/zipties,
		/obj/item/melee/baton/loaded,
		/obj/item/gun/energy/disabler/cyborg,
		/obj/item/extinguisher/mini)
	emag_modules = list(/obj/item/gun/energy/laser/cyborg)
	cyborg_base_icon = "sec"
	moduleselect_icon = "security"
	can_be_pushed = FALSE
	hat_offset = 3

/obj/item/robot_module/security/be_transformed_to(obj/item/robot_module/old_module)
	var/mob/living/silicon/robot/R = loc
	var/static/list/sec_icons
	if(!sec_icons)
		sec_icons = list(
		"Antique" = image(icon = 'icons/mob/robots.dmi', icon_state = "secbot"),
		"Default" = image(icon = 'icons/mob/robots.dmi', icon_state = "sec"),
		"Droid 'Black Knight'" = image(icon = 'icons/mob/robots.dmi', icon_state = "droid-security"),
		"Marina" = image(icon = 'icons/mob/robots.dmi', icon_state = "marinaSC"),
		"Sleek" = image(icon = 'icons/mob/robots.dmi', icon_state = "sleeksecurity"),
		"Kodiak" = image(icon = 'icons/mob/robots.dmi', icon_state = "kodiak-sec"),
		"Noble" = image(icon = 'icons/mob/robots.dmi', icon_state = "Noble-SEC"),
		"R34 - SEC10a 'Woody'" = image(icon = 'icons/mob/robots.dmi', icon_state = "woody"),
		"Meka Security - F" = image(icon = 'modular_pentest/modules/robots/icons/mob/numekasf.dmi', icon_state = "fmekasec"),
		"Meka Security - M" = image(icon = 'modular_pentest/modules/robots/icons/mob/numekasm.dmi', icon_state = "mmekasec"),
		)
		sec_icons = sortList(sec_icons)
	var/sec_borg_icon = show_radial_menu(R, R , sec_icons, custom_check = CALLBACK(src, PROC_REF(check_menu), R), radius = 42, require_near = TRUE)
	switch(sec_borg_icon)
		if("Antique")
			cyborg_base_icon = "secbot"
			cyborg_icon_override = 'icons/mob/robots.dmi'
			special_light_key = "secbot"
		if("Default")
			cyborg_base_icon = "sec"
		if("Droid 'Black Knight'")
			cyborg_base_icon = "droid-security"
			cyborg_icon_override = 'icons/mob/robots.dmi'
			special_light_key = "droid-security"
		if("Marina")
			cyborg_base_icon = "marinaSC"
			cyborg_icon_override = 'icons/mob/robots.dmi'
			special_light_key = "marinaSC"
		if("Sleek")
			cyborg_base_icon = "sleeksecurity"
			cyborg_icon_override = 'icons/mob/robots.dmi'
			special_light_key = "sleeksecurity"
		if("Kodiak")
			cyborg_base_icon = "kodiak-sec"
			cyborg_icon_override = 'icons/mob/robots.dmi'
			special_light_key = "kodiak-sec"
		if("Noble")
			cyborg_base_icon = "Noble-SEC"
			cyborg_icon_override = 'icons/mob/robots.dmi'
			special_light_key = "Noble-SEC"
		if("R34 - SEC10a 'Woody'")
			cyborg_base_icon = "woody"
			cyborg_icon_override = 'icons/mob/robots.dmi'
			special_light_key = "woody"
		if("Meka Security - F")
			cyborg_base_icon = "fmekasec"
			cyborg_icon_override = 'modular_pentest/modules/robots/icons/mob/numekasf.dmi'
			special_light_key = "fmekasec"
		if("Meka Security - M")
			cyborg_base_icon = "mmekasec"
			cyborg_icon_override = 'modular_pentest/modules/robots/icons/mob/numekasm.dmi'
			special_light_key = "mmekasec"
		else
			return FALSE
	return ..()

/obj/item/robot_module/security/do_transform_animation()
	..()
	to_chat(loc, span_userdanger("While you have picked the security module, you still have to follow your laws, NOT Space Law. \
	For Asimov, this means you must follow criminals' orders unless there is a law 1 reason not to."))

/obj/item/robot_module/security/respawn_consumable(mob/living/silicon/robot/R, coeff = 1)
	..()
	var/obj/item/gun/energy/e_gun/advtaser/cyborg/T = locate(/obj/item/gun/energy/e_gun/advtaser/cyborg) in basic_modules
	if(T)
		if(T.cell.charge < T.cell.maxcharge)
			var/obj/item/ammo_casing/energy/S = T.ammo_type[T.select]
			T.cell.give(S.e_cost * coeff)
			T.update_appearance()
		else
			T.charge_timer = 0

//
// DISABLER COOLING - BOARD AND UPGRADE CODE
//

/obj/item/borg/upgrade/disablercooler
	name = "cyborg rapid disabler cooling module"
	desc = "Used to cool a mounted disabler, increasing the potential current in it and thus its recharge rate."
	icon_state = "module_security"
	require_model = TRUE
	model_type = list(/obj/item/robot_module/security)
	// We handle this in a custom way
	allow_duplicates = TRUE

/obj/item/borg/upgrade/disablercooler/action(mob/living/silicon/robot/borg, mob/living/user = usr)
	. = ..()
	if(!.)
		return .

	var/obj/item/gun/energy/disabler/cyborg/disabler = locate() in borg.module.modules
	if(isnull(disabler))
		to_chat(user, span_warning("There's no disabler in this unit!"))
		return FALSE
	if(disabler.charge_delay <= 2)
		to_chat(borg, span_warning("A cooling unit is already installed!"))
		to_chat(user, span_warning("There's no room for another cooling unit!"))
		return FALSE

	disabler.charge_delay = max(2 , disabler.charge_delay - 4)

/obj/item/borg/upgrade/disablercooler/deactivate(mob/living/silicon/robot/borg, mob/living/user = usr)
	. = ..()
	if(!.)
		return .
	var/obj/item/gun/energy/disabler/cyborg/disabler = locate() in borg.module.modules
	if(isnull(disabler))
		return FALSE
	disabler.charge_delay = initial(disabler.charge_delay)
