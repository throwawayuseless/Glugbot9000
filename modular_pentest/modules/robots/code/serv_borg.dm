/*
		SERVICE BORG

		See robot_modules.dm
*/

/obj/item/robot_module/butler
	name = "Service"
	basic_modules = list(
		/obj/item/assembly/flash/cyborg,
		/obj/item/reagent_containers/borghypo/borgshaker,
		/obj/item/borg/apparatus/beaker/service,
		/obj/item/reagent_containers/glass/beaker/large, //I know a shaker is more appropiate but this is for ease of identification
		/obj/item/reagent_containers/condiment/enzyme,
		/obj/item/reagent_containers/dropper,
		/obj/item/rsf,
		/obj/item/storage/bag/tray,
		/obj/item/pen,
		/obj/item/toy/crayon/spraycan/borg,
		/obj/item/extinguisher/mini,
		/obj/item/hand_labeler/borg,
		/obj/item/razor,
		/obj/item/instrument/guitar,
		/obj/item/instrument/piano_synth,
		/obj/item/lighter,
		/obj/item/borg/lollipop,
		/obj/item/chisel,
		/obj/item/reagent_containers/glass/rag,
		/obj/item/storage/bag/money,
		/obj/item/fish_feed,
	)
	emag_modules = list(/obj/item/reagent_containers/borghypo/borgshaker/hacked)
	cyborg_base_icon = "service_m" // display as butlerborg for radial model selection
	moduleselect_icon = "service"
	special_light_key = "service"
	hat_offset = 0

/obj/item/robot_module/butler/respawn_consumable(mob/living/silicon/robot/R, coeff = 1)
	..()
	var/obj/item/reagent_containers/O = locate(/obj/item/reagent_containers/condiment/enzyme) in basic_modules
	if(O)
		O.reagents.add_reagent(/datum/reagent/consumable/enzyme, 2 * coeff)

/obj/item/robot_module/butler/be_transformed_to(obj/item/robot_module/old_module)
	var/mob/living/silicon/robot/R = loc
	var/static/list/service_icons
	if(!service_icons)
		service_icons = list(
		"Default - 'Waitress'" = image(icon = 'icons/mob/robots.dmi', icon_state = "service_f"),
		"Default - 'Butler'" = image(icon = 'icons/mob/robots.dmi', icon_state = "service_m"),
		"Default - 'Bro'" = image(icon = 'icons/mob/robots.dmi', icon_state = "brobot"),
		"Default - 'Kent'" = image(icon = 'icons/mob/robots.dmi', icon_state = "kent"),
		"Default - 'Maximillion'" = image(icon = 'icons/mob/robots.dmi', icon_state = "tophat"),
		"Default - 'Hydro'" = image(icon = 'icons/mob/robots.dmi', icon_state = "hydrobot"),
		"Marina" = image(icon = 'icons/mob/robots.dmi', icon_state = "marinaSV"),
		"Sleek" = image(icon = 'icons/mob/robots.dmi', icon_state = "sleekservice"),
		"Kodiak - 'Teddy'" = image(icon = 'icons/mob/robots.dmi', icon_state = "kodiak-service"),
		"Noble" = image(icon = 'icons/mob/robots.dmi', icon_state = "Noble-SRV"),
		"R34 - SRV9a 'Llyod'" = image(icon = 'icons/mob/robots.dmi', icon_state = "lloyd"),
		"Meka Service - F" = image(icon = 'modular_pentest/modules/robots/icons/mob/numekasf.dmi', icon_state = "fmekaserv"),
		"Meka Service - M" = image(icon = 'modular_pentest/modules/robots/icons/mob/numekasm.dmi', icon_state = "mmekaserv"),
		)
		service_icons = sortList(service_icons)
	var/service_robot_icon = show_radial_menu(R, R , service_icons, custom_check = CALLBACK(src, PROC_REF(check_menu), R), radius = 42, require_near = TRUE)
	switch(service_robot_icon)
		if("Default - 'Waitress'")
			cyborg_base_icon = "service_f"
		if("Default - 'Butler'")
			cyborg_base_icon = "service_m"
		if("Default - 'Bro'")
			cyborg_base_icon = "brobot"
		if("Default - 'Maximillion'")
			cyborg_base_icon = "tophat"
			special_light_key = null
			hat_offset = INFINITY //He is already wearing a hat
		if("Default - 'Hydro'")
			cyborg_base_icon = "hydrobot"
			cyborg_icon_override = 'icons/mob/robots.dmi'
			special_light_key = "hydrobot"
		if("Default - 'Kent'")
			cyborg_base_icon = "kent"
			special_light_key = "medical"
			hat_offset = 3
		if("Marina")
			cyborg_base_icon = "marinaSV"
			cyborg_icon_override = 'icons/mob/robots.dmi'
			special_light_key = "marinaSV"
		if("Sleek")
			cyborg_base_icon = "sleekservice"
			cyborg_icon_override = 'icons/mob/robots.dmi'
			special_light_key = "sleekservice"
		if("Kodiak - 'Teddy'")
			cyborg_base_icon = "kodiak-service"
			cyborg_icon_override = 'icons/mob/robots.dmi'
			special_light_key = "kodiak-service"
		if("Noble")
			cyborg_base_icon = "Noble-SRV"
			cyborg_icon_override = 'icons/mob/robots.dmi'
			special_light_key = "Noble-SRV"
		if("R34 - SRV9a 'Llyod'")
			cyborg_base_icon = "lloyd"
			cyborg_icon_override = 'icons/mob/robots.dmi'
			special_light_key = "lloyd"
		if("Meka Service - F")
			cyborg_base_icon = "fmekaserv"
			cyborg_icon_override = 'modular_pentest/modules/robots/icons/mob/numekasf.dmi'
			special_light_key = "fmekaserv"
		if("Meka Service - M")
			cyborg_base_icon = "mmekaserv"
			cyborg_icon_override = 'modular_pentest/modules/robots/icons/mob/numekasm.dmi'
			special_light_key = "mmekaserv"
		else
			return FALSE
	return ..()

//
// SERVICE BORG PENTEST VARIABLE OVERRIDE
// borghydro.dm

/obj/item/reagent_containers/borghypo/borgshaker
	reagent_ids = list(
		/datum/reagent/consumable/applejuice, /datum/reagent/consumable/banana, /datum/reagent/consumable/coffee,
		/datum/reagent/consumable/cream, /datum/reagent/consumable/dr_gibb, /datum/reagent/consumable/grenadine,
		/datum/reagent/consumable/ice, /datum/reagent/consumable/lemonjuice, /datum/reagent/consumable/lemon_lime,
		/datum/reagent/consumable/limejuice, /datum/reagent/consumable/menthol, /datum/reagent/consumable/milk,
		/datum/reagent/consumable/nothing, /datum/reagent/consumable/orangejuice, /datum/reagent/consumable/peachjuice,
		/datum/reagent/consumable/sodawater, /datum/reagent/consumable/space_cola, /datum/reagent/consumable/spacemountainwind,
		/datum/reagent/consumable/pwr_game, /datum/reagent/consumable/shamblers, /datum/reagent/consumable/soymilk,
		/datum/reagent/consumable/space_up, /datum/reagent/consumable/sugar, /datum/reagent/consumable/tea,
		/datum/reagent/consumable/tomatojuice, /datum/reagent/consumable/tonic, /datum/reagent/water,
		/datum/reagent/consumable/pineapplejuice, /datum/reagent/consumable/sol_dry,
		/datum/reagent/consumable/ethanol/ale, /datum/reagent/consumable/ethanol/applejack, /datum/reagent/consumable/ethanol/beer,
		/datum/reagent/consumable/ethanol/champagne, /datum/reagent/consumable/ethanol/cognac, /datum/reagent/consumable/ethanol/creme_de_menthe,
		/datum/reagent/consumable/ethanol/creme_de_cacao, /datum/reagent/consumable/ethanol/gin, /datum/reagent/consumable/ethanol/kahlua,
		/datum/reagent/consumable/ethanol/rum, /datum/reagent/consumable/ethanol/sake, /datum/reagent/consumable/ethanol/tequila,
		/datum/reagent/consumable/ethanol/triple_sec, /datum/reagent/consumable/ethanol/vermouth, /datum/reagent/consumable/ethanol/vodka,
		/datum/reagent/consumable/ethanol/whiskey, /datum/reagent/consumable/ethanol/wine, /datum/reagent/consumable/ethanol/creme_de_coconut
	)

//
// CONDIMENT SYNTHESIZER - BOARD AND UPGRADE CODE
//

/obj/item/borg/upgrade/condiment_synthesizer
	name = "Service Cyborg Condiment Synthesiser"
	desc = "An upgrade to the service model cyborg, allowing it to produce solid condiments."
	icon_state = "module_service"
	require_model = TRUE
	model_type = list(/obj/item/robot_module/butler)

	items_to_add = list(/obj/item/reagent_containers/borghypo/condiment_synthesizer)

//
// CONDIMENT SYNTHESIZER BOARD DESIGN - mechfabricator_designs.dm
//

/datum/design/borg_upgrade_condiment_synthesizer
	name = "Condiment Synthesizer"
	id = "borg_upgrade_condiment_synthesizer"
	build_type = MECHFAB
	build_path = /obj/item/borg/upgrade/condiment_synthesizer
	materials = list(
		/datum/material/iron = 7000,
		/datum/material/glass = 7000,
		/datum/material/plasma = 4000,
		/datum/material/uranium = 4000,
	)
	construction_time = 90
	category = list("Cyborg Upgrade Modules")

//
// CONDIMENT SYNTHESIZER - CODE
//

/obj/item/reagent_containers/borghypo/condiment_synthesizer // Solids! Condiments! The borger uprising!
	name = "condiment synthesizer"
	desc = "An advanced condiment synthesizer"
	icon = 'icons/obj/food/containers.dmi'
	icon_state = "flour"
	possible_transfer_amounts = list(5,10,20,1)
	charge_cost = 40 //Costs double the power of the borgshaker due to synthesizing solids
	recharge_time = 6 //Double the recharge time too, for the same reason.

	reagent_ids = list(
		/datum/reagent/consumable/bbqsauce,
		/datum/reagent/consumable/blackpepper,
		/datum/reagent/consumable/capsaicin,
		/datum/reagent/consumable/coco,
		/datum/reagent/consumable/cornoil,
		/datum/reagent/consumable/corn_starch,
		/datum/reagent/consumable/eggyolk,
		/datum/reagent/consumable/flour,
		/datum/reagent/consumable/ketchup,
		/datum/reagent/consumable/mayonnaise,
		/datum/reagent/consumable/rice,
		/datum/reagent/consumable/sodiumchloride,
		/datum/reagent/consumable/sugar,
		/datum/reagent/consumable/soysauce,
		/datum/reagent/consumable/vanilla,
	)

/obj/item/reagent_containers/borghypo/condiment_synthesizer/attack(mob/M, mob/user)
	return //Can't inject stuff with a shaker, can we? //not with that attitude

/obj/item/reagent_containers/borghypo/condiment_synthesizer/regenerate_reagents()
	if(iscyborg(src.loc))
		var/mob/living/silicon/robot/R = src.loc
		if(R && R.cell)
			for(var/i in modes) //Lots of reagents in this one, so it's best to regenrate them all at once to keep it from being tedious.
				var/valueofi = modes[i]
				var/datum/reagents/RG = reagent_list[valueofi]
				if(RG.total_volume < RG.maximum_volume)
					R.cell.use(charge_cost)
					RG.add_reagent(reagent_ids[valueofi], 5)

/obj/item/reagent_containers/borghypo/condiment_synthesizer/afterattack(obj/target, mob/user, proximity)
	. = ..()
	if(!proximity)
		return

	else if(target.is_refillable())
		var/datum/reagents/R = reagent_list[mode]
		if(!R.total_volume)
			to_chat(user, "<span class='warning'>[src] is currently out of this ingredient! Please allow some time for the synthesizer to produce more.</span>")
			return

		if(target.reagents.total_volume >= target.reagents.maximum_volume)
			to_chat(user, "<span class='notice'>[target] is full.</span>")
			return

		var/trans = R.trans_to(target, amount_per_transfer_from_this, transfered_by = user)
		to_chat(user, "<span class='notice'>You transfer [trans] unit\s of the solution to [target].</span>")

/obj/item/reagent_containers/borghypo/condiment_synthesizer/DescribeContents()
	var/datum/reagents/RS = reagent_list[mode]
	var/datum/reagent/R = locate() in RS.reagent_list
	if(R)
		return "<span class='notice'>It currently has [R.volume] unit\s of [R.name] stored.</span>"
	else
		return "<span class='warning'>It is currently empty! Please allow some time for the synthesizer to produce more.</span>"

//
// SILICON KNIFE - BOARD AND UPGRADE CODE
//

/obj/item/borg/upgrade/silicon_knife
	name = "Service Cyborg Kitchen Toolset"
	desc = "An upgrade to the service model cyborg, to help process foods."
	icon_state = "module_service"
	require_model = TRUE
	model_type = list(/obj/item/robot_module/butler)

	items_to_add = list(/obj/item/melee/knife/kitchen/silicon)

//
// SILICON KNIFE BOARD DESIGN - mechfabricator_designs.dm
//

/datum/design/borg_upgrade_silicon_knife
	name = "Kitchen Toolset"
	id = "borg_upgrade_silicon_knife"
	build_type = MECHFAB
	build_path = /obj/item/borg/upgrade/silicon_knife
	materials = list(
		/datum/material/iron = 5000,
		/datum/material/gold = 3000,
		/datum/material/silver = 4000,
	)
	construction_time = 90
	category = list("Cyborg Upgrade Modules")

//
// SILICON KNIFE - CODE
//

/obj/item/melee/knife/kitchen/silicon
	name = "Silicon Knife"
	icon = 'modular_pentest/modules/robots/icons/obj/borg_tools.dmi'
	icon_state = "sili_knife"
	item_state = "sili_knife"
	world_file = 'modular_pentest/modules/robots/icons/obj/borg_tools.dmi'
	desc = "A breakthrough in synthetic engineering, this tool is a knife programmed to dull when not used for cooking purposes."
	force = 0
	throwforce = 0
	hitsound = 'sound/weapons/bladeslice.ogg'
	tool_behaviour = TOOL_KNIFE

//
// SERVICE APPARATUS - BOARD AND UPGRADE CODE
//

/obj/item/borg/upgrade/service_apparatus
	name = "Service Cyborg Service Apparatus"
	desc = "An upgrade to the service model cyborg, to help handle foods and paper."
	icon_state = "module_service"
	require_model = TRUE
	model_type = list(/obj/item/robot_module/butler)

	items_to_add = list(/obj/item/borg/apparatus/service)

//
// SERVICE APPARATUS BOARD DESIGN - mechfabricator_designs.dm
//

/datum/design/borg_upgrade_service_apparatus
	name = "Service Apparatus"
	id = "borg_upgrade_service_apparatus"
	build_type = MECHFAB
	build_path = /obj/item/borg/upgrade/service_apparatus
	materials = list(
		/datum/material/iron = 5000,
		/datum/material/titanium = 2000,
	)
	construction_time = 60
	category = list("Cyborg Upgrade Modules")

//
// SERVICE APPARATUS - CODE
//

/obj/item/borg/apparatus/service
	name = "service apparatus"
	desc = "A special apparatus for carrying food, seeds, grafts, bowls, plates, oven trays, soup pots and paper."
	icon = 'modular_pentest/modules/robots/icons/obj/borg_tools.dmi'
	icon_state = "borg_service_apparatus"
	storable = list(
		/obj/item/food,
		/obj/item/paper,
		/obj/item/reagent_containers/food,
		/obj/item/reagent_containers/condiment,
		/obj/item/seeds,
		/obj/item/fish,
	)

/obj/item/borg/apparatus/service/Initialize(mapload)
	update_appearance()
	return ..()

/obj/item/borg/apparatus/service/update_overlays()
	. = ..()
	var/mutable_appearance/arm = mutable_appearance(icon, "borg_hardware_apparatus_arm1")
	if(stored)
		stored.pixel_x = -3
		stored.pixel_y = 0
		if((!istype(stored, /obj/item/food)))
			arm.icon_state = "borg_hardware_apparatus_arm2"
		var/mutable_appearance/stored_copy = new /mutable_appearance(stored)
		stored_copy.layer = FLOAT_LAYER
		stored_copy.plane = FLOAT_PLANE
		. += stored_copy
	. += arm

/obj/item/borg/apparatus/service/examine()
	. = ..()
	if(stored)
		. += "The apparatus currently has [stored] secured."
		. += span_notice("<i>Alt-click</i> will drop the currently secured item.")

//
// ROLLING TABLE - BOARD AND UPGRADE CODE
//

/obj/item/borg/upgrade/rolling_table
	name = "Service Cyborg Rolling Table Dock"
	desc = "An upgrade to the service model cyborg, to help provide mobile service."
	icon_state = "module_service"
	require_model = TRUE
	model_type = list(/obj/item/robot_module/butler)

	items_to_add = list(/obj/item/rolling_table_dock)

//
// ROLLING TABLE BOARD DESIGN - mechfabricator_designs.dm
//

/datum/design/borg_upgrade_rolling_table
	name = "Rolling Table Dock"
	id = "borg_upgrade_rolling_table"
	build_type = MECHFAB
	build_path = /obj/item/borg/upgrade/rolling_table
	materials = list(
		/datum/material/iron = 10000,
		/datum/material/titanium = 4000,
	)
	construction_time = 60
	category = list("Cyborg Upgrade Modules")

//
// ROLLING TABLE - CODE
//

/obj/item/rolling_table_dock
	name = "rolling table dock"
	desc = "A collapsed roller table that can be ejected for service on the go. Must be collected or replaced after use."
	icon = 'icons/obj/smooth_structures/rollingtable.dmi'
	icon_state = "rollingtable"
	var/obj/structure/table/rolling/loaded = null

/obj/item/rolling_table_dock/Initialize(mapload)
	. = ..()
	loaded = new(src)

/obj/structure/table/rolling/attackby(obj/item/wtable, mob/user, params)
	if(!istype(wtable, /obj/item/rolling_table_dock))
		return ..()
	var/obj/item/rolling_table_dock/rable = wtable
	var/turf/target_table = get_turf(src)
	if(rable.loaded)
		to_chat(user, span_warning("You already have a roller table docked!"))
		return
	if(locate(/mob/living) in target_table)
		to_chat(user, span_warning("You can't collect the table with that much on top!"))
		return
	else
		rable.loaded = src
		forceMove(rable)
		user.visible_message(span_notice("[user] collects [src]."), balloon_alert(user, "you collect the [src]."))
	return TRUE

/obj/item/roller/attack_self(mob/user)
	deploy_roller(user, user.loc)

/obj/item/rolling_table_dock/afterattack(obj/target, mob/living/user, proximity)
	. = ..()
	if(!proximity)
		return
	if(isopenturf(target))
		deploy_rolling_table(user, target)
	return NONE

/obj/item/rolling_table_dock/proc/deploy_rolling_table(mob/user, atom/location)
	var/obj/structure/table/rolling/rable = new /obj/structure/table/rolling(location)
	rable.add_fingerprint(user)
	qdel(src)

/obj/item/rolling_table_dock/examine(mob/user)
	. = ..()
	. += "The dock is [loaded ? "loaded" : "empty"]."

/obj/item/rolling_table_dock/deploy_rolling_table(mob/user, atom/location)
	if(loaded)
		loaded.forceMove(location)
		user.visible_message(span_notice("[user] deploys [loaded]."), balloon_alert(user, "you deploy the [loaded]."))
		loaded = null
	else
		balloon_alert(user, "the dock is Empty!")

//
// GLASS STORAGE APPARATUS - BOARD AND UPGRADE CODE
//

/obj/item/borg/upgrade/drink_app
	name = "glass storage apparatus"
	desc = "A supplementary drinking glass storage apparatus for service cyborgs."
	icon_state = "module_service"
	require_model = TRUE
	model_type = list(/obj/item/robot_module/butler)

	items_to_add = list(/obj/item/borg/apparatus/beaker/service)

//
// GLASS STORAGE APPARATUS - BOARD DESIGN - mechfabricator_designs.dm
//

/datum/design/borg_upgrade_drink_apparatus
	name = "Drink Apparatus"
	id = "borg_upgrade_drink_apparatus"
	build_type = MECHFAB
	build_path = /obj/item/borg/upgrade/drink_app
	materials = list(
		/datum/material/iron = 5000,
		/datum/material/glass = 4000,
	)
	construction_time = 60
	category = list("Cyborg Upgrade Modules")

//
// SERVICE BOTANY - CODE
//

/obj/item/storage/bag/plants/cyborg
	name = "cyborg plant bag"

//
// SERVICE BOTANY - BOARD AND UPGRADE CODE
//

/obj/item/borg/upgrade/botany_upgrade
	name = "Service Cyborg Botany Tools"
	desc = "An upgrade to the service model cyborg, that let them do gardening and plant processing."
	icon_state = "module_service"
	require_model = TRUE
	model_type = list(/obj/item/robot_module/butler)

	items_to_add = list(/obj/item/storage/bag/plants/cyborg, /obj/item/borg/cyborg_omnitool/botany, /obj/item/plant_analyzer)

//
// GLASS STORAGE APPARATUS - BOARD DESIGN - mechfabricator_designs.dm
//

/datum/design/borg_upgrade_botany
	name = "Botany Tools"
	id = "borg_upgrade_botany"
	build_type = MECHFAB
	build_path = /obj/item/borg/upgrade/botany_upgrade
	materials = list(
		/datum/material/iron = 10000,
		/datum/material/glass = 4000,
	)
	construction_time = 60
	category = list("Cyborg Upgrade Modules")
